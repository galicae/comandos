# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_plot.ipynb.

# %% auto 0
__all__ = ['highlighted_dimplot']

# %% ../nbs/01_plot.ipynb 4
import pickle

import numpy as np
import pandas as pd

import anndata as ad
import scanpy as sc
from samap.mapping import SAMAP

import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import seaborn as sns

from . import util

# %% ../nbs/01_plot.ipynb 6
def highlighted_dimplot(
    adata,
    species,
    clustering,
    cluster,
    embedding="X_umap",
    highlight="red",
    figsize=(10, 10),
    save=None,
):
    """
    Plot a low-dimensional embedding and highlight a chosen cluster with a superimposed circle.

    Parameters
    ----------
    adata : anndata.AnnData
        AnnData object to plot.
    species : str
        Species name. Will be used in the title, and removed from the cluster names if present.
    clustering : str
        Clustering to plot. Must be present in `adata.obs`.
    cluster : str
        Cluster to highlight.
    embedding : str, optional
        Embedding to plot (default: "X_umap").
    highlight : str, optional
        Color of the circle (default: "red").
    figsize : tuple, optional
        Figure size (default: (10, 10)).
    save : str, optional
        Path to save the figure (default: None).

    Returns
    -------
    None
    """
    cluster_cells = adata.obs[clustering] == cluster.replace(species + "_", "")
    coords = adata.obsm[embedding][cluster_cells]
    cx, cy = util.find_center(coords)
    radius = np.mean(np.std(coords, axis=0))
    if radius < 0.5:
        radius = 0.5
    elif radius > 2:
        radius = 2
    _fig, ax = plt.subplots(figsize=figsize)
    g = sc.pl.embedding(
        adata,
        basis=embedding,
        color=clustering,
        legend_loc="on data",
        ax=ax,
        show=False,
        title=species,
    )
    g.axes.add_patch(
        Circle((cx, cy), radius, linewidth=3, facecolor="none", edgecolor=highlight)
    )
    g.set_title(species)
    if save is not None:
        plt.savefig(save)
